name: Pruebas Dinámicas de Seguridad (DAST)

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  issues: write

jobs:
  dast:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias
        run: |
          pip install -r requirements.txt
          pip list
          pip check

      - name: Iniciar aplicación Flask
        run: |
          export FLASK_APP_NAME=app
          export FLASK_ENV=development
          export SQLALCHEMY_DATABASE_URI=sqlite:///:memory:
          export DOMAIN=localhost
          flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1 &
          for i in {1..60}; do
            curl -s http://localhost:5000 && break
            echo "Esperando a que Flask inicie ($i/60)..."
            sleep 1
          done
          curl http://localhost:5000 || (echo "Error: No se pudo conectar a Flask"; cat flask.log; exit 1)

      - name: Mostrar logs de Flask si falla
        if: failure()
        run: |
          cat flask.log

      - name: Escaneo OWASP ZAP
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:5000'
          fail_action: false
          cmd_options: '-d -x report_xml.xml -r report_html.html'

      - name: Verificar directorio de trabajo
        run: |
          pwd
          ls -la

      - name: Verificar archivo generado
        run: |
          ls -l report_xml.xml || echo "report_xml.xml no encontrado"
          cat report_xml.xml || echo "No se pudo leer report_xml.xml"

      - name: Instalar jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Crear engagement en DefectDojo
        env:
          DEFECTDOJO_TOKEN: ${{ secrets.DEFECTDOJO_TOKEN }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          TODAY=$(date +%Y-%m-%d)
          NEXT_WEEK=$(date -d "$TODAY +7 days" +%Y-%m-%d || date -v +7d +%Y-%m-%d)
          RESPONSE=$(curl --fail --location --request POST "$DEFECTDOJO_URL/api/v2/engagements/" \
            -H "Authorization: Token $DEFECTDOJO_TOKEN" \
            -H "Content-Type: application/json" \
            --data-raw '{
              "name": "DAST-Pipeline-${{ github.run_id }}",
              "description": "Escaneo DAST para commit ${{ github.sha }}",
              "product": "${{ secrets.DEFECTDOJO_PRODUCT_ID }}",
              "target_start": "'"$TODAY"'",
              "target_end": "'"$NEXT_WEEK"'",
              "engagement_type": "CI/CD",
              "status": "In Progress",
              "build_id": "${{ github.run_id }}",
              "commit_hash": "${{ github.sha }}",
              "branch_tag": "${{ github.ref_name }}",
              "deduplication_on_engagement": true
            }')
          echo "Respuesta de DefectDojo: $RESPONSE"
          ENGAGEMENT_ID=$(echo "$RESPONSE" | jq -r '.id')
          if [ -z "$ENGAGEMENT_ID" ] || [ "$ENGAGEMENT_ID" = "null" ]; then
            echo "Error: No se pudo crear el engagement. Respuesta: $RESPONSE"
            exit 1
          fi
          echo "DEFECTDOJO_ENGAGEMENT_ID=$ENGAGEMENT_ID" >> $GITHUB_ENV

      - name: Subir informe a DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: report_xml.xml
          scan_type: ZAP Scan
          engagement: ${{ env.DEFECTDOJO_ENGAGEMENT_ID }}
          verified: true
          active: true
          minimum_severity: Info
          close_old_findings: true

      - name: Mostrar logs de importación
        if: failure()
        run: |
          cat /tmp/defectdojo-import-scan.log || echo "No se encontró el log de importación"

      - name: Crear issue con resultados de ZAP
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('report_json.json', 'utf8')); // Cambiar a XML si es necesario
            const alerts = report.site[0].alerts || [];
            const alertSummary = alerts.map(alert => `- ${alert.name}: ${alert.riskdesc} (${alert.count} instancias)`).join('\n');
            
            const issueTitle = 'ZAP Scan Baseline Report';
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['ZAP']
            });
            
            const issueExists = existingIssues.data.some(issue => issue.title === issueTitle);
            if (!issueExists) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: `## ZAP Scan Baseline Report\n\nResultados del escaneo de seguridad:\n${alertSummary}\n\nDetalles completos en el reporte adjunto.`,
                labels: ['ZAP', 'security']
              });
            } else {
              console.log('Issue ya existe, omitiendo creación.');
            }

      - name: Subir informe DAST
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_xml.xml
            report_html.html
            report_md.md