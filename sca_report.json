{"dependencies": [{"name": "afmparser", "version": "1.0.3", "vulns": []}, {"name": "alembic", "version": "1.13.2", "vulns": []}, {"name": "aniso8601", "version": "9.0.1", "vulns": []}, {"name": "antlr4-python3-runtime", "version": "4.13.1", "vulns": []}, {"name": "astutils", "version": "0.0.6", "vulns": []}, {"name": "attrs", "version": "23.2.0", "vulns": []}, {"name": "beautifulsoup4", "version": "4.12.3", "vulns": []}, {"name": "blinker", "version": "1.8.2", "vulns": []}, {"name": "brotli", "version": "1.1.0", "vulns": []}, {"name": "bs4", "version": "0.0.2", "vulns": []}, {"name": "certifi", "version": "2024.7.4", "vulns": []}, {"name": "cffi", "version": "1.16.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.3.2", "vulns": []}, {"name": "click", "version": "8.1.7", "vulns": []}, {"name": "configargparse", "version": "1.7", "vulns": []}, {"name": "coverage", "version": "7.6.0", "vulns": []}, {"name": "cryptography", "version": "42.0.8", "vulns": [{"id": "GHSA-h4gh-qq45-vh27", "fix_versions": ["43.0.1"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 37.0.0-43.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20240903.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions. "}, {"id": "GHSA-79v4-65xg-pq4g", "fix_versions": ["44.0.1"], "aliases": ["CVE-2024-12797"], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 42.0.0-44.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20250211.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}]}, {"name": "dd", "version": "0.6.0", "vulns": []}, {"name": "dnspython", "version": "2.6.1", "vulns": []}, {"name": "docker", "version": "7.1.0", "vulns": []}, {"name": "email-validator", "version": "2.2.0", "vulns": []}, {"name": "faker", "version": "26.0.0", "vulns": []}, {"name": "flake8", "version": "7.1.0", "vulns": []}, {"name": "flamapy", "version": "2.0.0.dev1", "vulns": []}, {"name": "flamapy-bdd", "version": "2.0.0.dev1", "vulns": []}, {"name": "flamapy-fm", "version": "2.0.0.dev1", "vulns": []}, {"name": "flamapy-fw", "version": "2.0.0.dev1", "vulns": []}, {"name": "flamapy-sat", "version": "2.0.0.dev1", "vulns": []}, {"name": "flask", "version": "3.0.3", "vulns": []}, {"name": "flask-cors", "version": "4.0.1", "vulns": [{"id": "PYSEC-2024-71", "fix_versions": ["4.0.2"], "aliases": ["CVE-2024-6221"], "description": "A vulnerability in corydolphin/flask-cors up to version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default, without any configuration option. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions."}, {"id": "GHSA-8vgw-p6qm-5gr7", "fix_versions": [], "aliases": ["CVE-2024-6844"], "description": "A vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues."}, {"id": "GHSA-43qf-4rqw-9q2g", "fix_versions": [], "aliases": ["CVE-2024-6866"], "description": "corydolphin/flask-cors version 4.0.1 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks."}, {"id": "GHSA-7rxf-gvfg-47g4", "fix_versions": [], "aliases": ["CVE-2024-6839"], "description": "corydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors."}]}, {"name": "flask-login", "version": "0.6.3", "vulns": []}, {"name": "flask-migrate", "version": "4.0.7", "vulns": []}, {"name": "flask-restful", "version": "0.3.10", "vulns": []}, {"name": "flask-sqlalchemy", "version": "3.1.1", "vulns": []}, {"name": "flask-wtf", "version": "1.2.1", "vulns": []}, {"name": "gevent", "version": "24.2.1", "vulns": []}, {"name": "geventhttpclient", "version": "2.3.1", "vulns": []}, {"name": "graphviz", "version": "0.20.3", "vulns": []}, {"name": "greenlet", "version": "3.0.3", "vulns": []}, {"name": "gunicorn", "version": "22.0.0", "vulns": [{"id": "GHSA-hc5x-x2vx-497g", "fix_versions": ["23.0.0"], "aliases": ["CVE-2024-6827"], "description": "Gunicorn version 21.2.0 does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it vulnerable to TE.CL request smuggling. This vulnerability can lead to cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information leakage, and business logic abuse."}]}, {"name": "h11", "version": "0.14.0", "vulns": []}, {"name": "h2", "version": "4.1.0", "vulns": []}, {"name": "hpack", "version": "4.0.0", "vulns": []}, {"name": "hyperframe", "version": "6.0.1", "vulns": []}, {"name": "idna", "version": "3.7", "vulns": []}, {"name": "iniconfig", "version": "2.0.0", "vulns": []}, {"name": "itsdangerous", "version": "2.2.0", "vulns": []}, {"name": "jinja2", "version": "3.1.4", "vulns": [{"id": "GHSA-q2x7-8rv6-6q7h", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56326"], "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."}, {"id": "GHSA-gmj6-6f8f-6699", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56201"], "description": "A bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used.  To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename."}, {"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "kaitaistruct", "version": "0.10", "vulns": []}, {"name": "locust", "version": "2.29.1", "vulns": []}, {"name": "mako", "version": "1.3.5", "vulns": []}, {"name": "markupsafe", "version": "2.1.5", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "msgpack", "version": "1.0.8", "vulns": []}, {"name": "networkx", "version": "3.3", "vulns": []}, {"name": "outcome", "version": "1.3.0.post0", "vulns": []}, {"name": "packaging", "version": "24.1", "vulns": []}, {"name": "pluggy", "version": "1.5.0", "vulns": []}, {"name": "ply", "version": "3.10", "vulns": []}, {"name": "psutil", "version": "6.0.0", "vulns": []}, {"name": "pyasn1", "version": "0.6.0", "vulns": []}, {"name": "pycodestyle", "version": "2.12.0", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pyflakes", "version": "3.2.0", "vulns": []}, {"name": "pymysql", "version": "1.1.1", "vulns": []}, {"name": "pyopenssl", "version": "24.1.0", "vulns": []}, {"name": "pyparsing", "version": "3.1.2", "vulns": []}, {"name": "pysocks", "version": "1.7.1", "vulns": []}, {"name": "pytest", "version": "8.2.2", "vulns": []}, {"name": "pytest-cov", "version": "5.0.0", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.0.1", "vulns": []}, {"name": "python-sat", "version": "1.8.dev13", "vulns": []}, {"name": "pytz", "version": "2024.1", "vulns": []}, {"name": "pyzmq", "version": "26.0.3", "vulns": []}, {"name": "requests", "version": "2.32.3", "vulns": []}, {"name": "selenium", "version": "4.22.0", "vulns": []}, {"name": "selenium-wire", "version": "5.1.0", "vulns": []}, {"name": "setuptools", "version": "70.3.0", "vulns": []}, {"name": "six", "version": "1.16.0", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soupsieve", "version": "2.5", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.31", "vulns": []}, {"name": "sqlalchemy-utils", "version": "0.41.2", "vulns": []}, {"name": "trio", "version": "0.26.0", "vulns": []}, {"name": "trio-websocket", "version": "0.11.1", "vulns": []}, {"name": "typing-extensions", "version": "4.12.2", "vulns": []}, {"name": "unidecode", "version": "1.3.8", "vulns": []}, {"name": "urllib3", "version": "2.2.2", "vulns": []}, {"name": "uvlparser", "version": "2.0.1", "vulns": []}, {"name": "webdriver-manager", "version": "4.0.1", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "werkzeug", "version": "3.0.3", "vulns": [{"id": "GHSA-f9vj-2wh5-fj8j", "fix_versions": ["3.0.6"], "aliases": ["CVE-2024-49766"], "description": "On Python < 3.11 on Windows, `os.path.isabs()` does not catch UNC paths like `//server/share`. Werkzeug's `safe_join()` relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable."}, {"id": "GHSA-q34m-jh98-gwm2", "fix_versions": ["3.0.6"], "aliases": ["CVE-2024-49767"], "description": "Applications using Werkzeug to parse `multipart/form-data` requests are vulnerable to resource exhaustion. A specially crafted form body can bypass the `Request.max_form_memory_size` setting.   The `Request.max_content_length` setting, as well as resource limits provided by deployment software and platforms, are also available to limit the resources used during a request. This vulnerability does not affect those settings. All three types of limits should be considered and set appropriately when deploying an application."}]}, {"name": "wheel", "version": "0.43.0", "vulns": []}, {"name": "wsproto", "version": "1.2.0", "vulns": []}, {"name": "wtforms", "version": "3.1.2", "vulns": []}, {"name": "zope-event", "version": "5.0", "vulns": []}, {"name": "zope-interface", "version": "6.4.post2", "vulns": []}, {"name": "zstandard", "version": "0.22.0", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.2", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.7", "vulns": []}, {"name": "rich", "version": "14.0.0", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "filelock", "version": "3.18.0", "vulns": []}, {"name": "license-expression", "version": "30.4.1", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "packageurl-python", "version": "0.16.0", "vulns": []}, {"name": "py-serializable", "version": "2.0.0", "vulns": []}, {"name": "pygments", "version": "2.19.1", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}], "fixes": []}
